package com.example.mcsblockly.shared.web

import js.core.jso

/**
 * Defines the JavaScript code generators for our custom blocks.
 */
fun defineCodeGenerators() {
    // A helper to define a generator function for a block
    fun defineGenerator(name: String, generator: (Blockly.Block) -> Any) {
        Blockly.JavaScript[name] = generator
    }

    defineGenerator("mission_start") { block ->
        val apiUrl = block.getFieldValue("API_URL")
        val missionId = block.getFieldValue("MISSION_ID")
        val uid = block.getFieldValue("UID")
        val sn = block.getFieldValue("SN")
        val commands = Blockly.JavaScript.statementToCode(block, "COMMANDS")

        """
        /**
         * Generated by KMP Blockly Mission Planner
         */
        async function sendCommand(commandData) {
          const apiEndpoint = '$apiUrl/rms/mission/robot/command';
          const authToken = 'Basic bWlzc2lvbjpudXdhMDA=';

          const body = {
            missionId: '$missionId',
            uId: '$uid',
            sn: '$sn',
            ...commandData
          };

          console.log('Sending command:', body.command, body);

          try {
            const response = await fetch(apiEndpoint, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json', 'Authorization': authToken },
              body: JSON.stringify(body)
            });
            if (!response.ok) {
              const errorBody = await response.json();
              throw new Error(`HTTP error! status: ${'$'}{response.status}`, { cause: errorBody });
            }
            const result = await response.json();
            console.log('Received ack:', result);
            await new Promise(resolve => setTimeout(resolve, 500));
            return result;
          } catch (error) {
            console.error('Failed to send command:', error);
            throw error;
          }
        }

        async function runMission() {
          try {
            console.log('ðŸš€ Mission Starting... (ID: $missionId)');
        $commands
            console.log('âœ… Mission Completed Successfully.');
          } catch (error) {
            console.error('ðŸ›‘ Mission Failed:', error.message, error.cause);
          }
        }

        // To run, call runMission() in the browser console.
        // runMission();
        """.trimIndent()
    }

    defineGenerator("adapter_new_task_notification") { _ ->
        "await sendCommand({ command: 'adapter_new_task_notification' });\n"
    }

    defineGenerator("adapter_complete_task") { _ ->
        "await sendCommand({ command: 'adapter_complete_task' });\n"
    }

    defineGenerator("adapter_interrupt_task") { _ ->
        "await sendCommand({ command: 'adapter_interrupt_task' });\n"
    }

    defineGenerator("adapter_pause_task") { _ ->
        "await sendCommand({ command: 'adapter_pause_task' });\n"
    }

    defineGenerator("adapter_resume_task") { _ ->
        "await sendCommand({ command: 'adapter_resume_task' });\n"
    }

    defineGenerator("adapter_interrupt_command") { _ ->
        "await sendCommand({ command: 'adapter_interrupt_command' });\n"
    }

    defineGenerator("adapter_navigation_stop") { _ ->
        "await sendCommand({ command: 'adapter_navigation_stop' });\n"
    }

    // --- Generators for Commands with Data Inputs ---

    defineGenerator("adapter_navigation") { block ->
        val location = Blockly.JavaScript.valueToCode(block, "LOCATION", Blockly.ORDER_ATOMIC) ?: "null"
        "await sendCommand({ command: 'adapter_navigation', location: $location });\n"
    }

    defineGenerator("adapter_delivery_middle_layer_control") { block ->
        val doors = Blockly.JavaScript.valueToCode(block, "DOORS", Blockly.ORDER_ATOMIC) ?: "[]"
        "await sendCommand({ command: 'adapter_delivery_middle_layer_control', door: $doors });\n"
    }

    defineGenerator("adapter_pickup_ui") { block ->
        val uiType = block.getFieldValue("UI_PICKUP_TYPE")
        val password = block.getFieldValue("PASSWORD")
        val doors = Blockly.JavaScript.valueToCode(block, "DOORS", Blockly.ORDER_ATOMIC) ?: "[]"
        "await sendCommand({ command: 'adapter_pickup_ui', ui_pickup_type: '$uiType', password: '$password', door: $doors });\n"
    }

    defineGenerator("adapter_pass_opt_password") { block ->
        val password = block.getFieldValue("PASSWORD")
        "await sendCommand({ command: 'adapter_pass_opt_password', password: '$password' });\n"
    }

    defineGenerator("adapter_switch_map") { block ->
        val map = Blockly.JavaScript.valueToCode(block, "MAP", Blockly.ORDER_ATOMIC) ?: "null"
        "await sendCommand({ command: 'adapter_switch_map', map: $map });\n"
    }

    defineGenerator("adapter_apply_map") { block ->
        val map = Blockly.JavaScript.valueToCode(block, "MAP", Blockly.ORDER_ATOMIC) ?: "null"
        "await sendCommand({ command: 'adapter_apply_map', map: $map });\n"
    }

    defineGenerator("adapter_local_locate") { block ->
        val location = Blockly.JavaScript.valueToCode(block, "LOCATION", Blockly.ORDER_ATOMIC) ?: "null"
        "await sendCommand({ command: 'adapter_local_locate', location: $location });\n"
    }

    defineGenerator("adapter_global_locate") { _ ->
        "await sendCommand({ command: 'adapter_global_locate' });\n"
    }

    defineGenerator("adapter_charging_ui") { _ ->
        "await sendCommand({ command: 'adapter_charging_ui' });\n"
    }

    // --- Combine Generators ---

    defineGenerator("adapter_combine_navigation_open_door") { block ->
        val location = Blockly.JavaScript.valueToCode(block, "LOCATION", Blockly.ORDER_ATOMIC) ?: "null"
        val door = Blockly.JavaScript.valueToCode(block, "DOOR", Blockly.ORDER_ATOMIC) ?: "[]"
        "await sendCommand({ command: 'adapter_combine_navigation_open_door', location: $location, door: $door });\n"
    }

    defineGenerator("adapter_combine_navigation_switch_map") { block ->
        val location = Blockly.JavaScript.valueToCode(block, "LOCATION", Blockly.ORDER_ATOMIC) ?: "null"
        val map = Blockly.JavaScript.valueToCode(block, "MAP", Blockly.ORDER_ATOMIC) ?: "null"
        "await sendCommand({ command: 'adapter_combine_navigation_switch_map', location: $location, map: $map });\n"
    }

    defineGenerator("adapter_combine_navi_manual_order") { block ->
        val location = Blockly.JavaScript.valueToCode(block, "LOCATION", Blockly.ORDER_ATOMIC) ?: "null"
        val door = Blockly.JavaScript.valueToCode(block, "DOOR", Blockly.ORDER_ATOMIC) ?: "[]"
        val orderList = Blockly.JavaScript.valueToCode(block, "ORDER_LIST", Blockly.ORDER_ATOMIC) ?: "[]"
        "await sendCommand({ command: 'adapter_combine_navi_manual_order', location: $location, door: $door, orderList: $orderList });\n"
    }

    defineGenerator("adapter_combine_navi_pickup_ui") { block ->
        val location = Blockly.JavaScript.valueToCode(block, "LOCATION", Blockly.ORDER_ATOMIC) ?: "null"
        val door = Blockly.JavaScript.valueToCode(block, "DOOR", Blockly.ORDER_ATOMIC) ?: "[]"
        val uiType = block.getFieldValue("UI_PICKUP_TYPE")
        "await sendCommand({ command: 'adapter_combine_navi_pickup_ui', location: $location, door: $door, ui_pickup_type: '$uiType' });\n"
    }

    defineGenerator("adapter_combine_navi_charging_ui") { block ->
        val location = Blockly.JavaScript.valueToCode(block, "LOCATION", Blockly.ORDER_ATOMIC) ?: "null"
        "await sendCommand({ command: 'adapter_combine_navi_charging_ui', location: $location });\n"
    }


    // --- Data Generators ---

    defineGenerator("data_location") { block ->
        val coordinate = block.getFieldValue("COORDINATE")
        val name = block.getFieldValue("NAME")
        val type = block.getFieldValue("TYPE")
        val obj = json("coordinate" to coordinate, "name" to name, "type" to type)
        arrayOf(JSON.stringify(obj), Blockly.ORDER_ATOMIC)
    }

    defineGenerator("data_door") { block ->
        val id = block.getFieldValue("ID")
        val enable = block.getFieldValue("ENABLE") == "TRUE"
        val obj = json("id" to id, "enable" to enable)
        arrayOf(JSON.stringify(obj), Blockly.ORDER_ATOMIC)
    }

    defineGenerator("data_map") { block ->
        val id = block.getFieldValue("ID")
        val name = block.getFieldValue("NAME")
        val archive = block.getFieldValue("ARCHIVE")
        val obj = json("id" to id, "name" to name, "archive" to archive)
        arrayOf(JSON.stringify(obj), Blockly.ORDER_ATOMIC)
    }

    defineGenerator("data_order") { block ->
        val type = block.getFieldValue("TYPE")
        val name = block.getFieldValue("NAME")
        val size = block.getFieldValue("SIZE").toInt()
        val obj = json("type" to type, "name" to name, "size" to size)
        arrayOf(JSON.stringify(obj), Blockly.ORDER_ATOMIC)
    }
}
